<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AppSource Inc]]></title>
  <link href="http://www.appsource.biz/atom.xml" rel="self"/>
  <link href="http://www.appsource.biz/"/>
  <updated>2014-09-16T17:04:51+08:00</updated>
  <id>http://www.appsource.biz/</id>
  <author>
    <name><![CDATA[AppSource Inc.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meditations on a Class Method]]></title>
    <link href="http://www.appsource.biz/blog/2014/09/03/meditations-on-a-class-method/"/>
    <updated>2014-09-03T23:26:04+08:00</updated>
    <id>http://www.appsource.biz/blog/2014/09/03/meditations-on-a-class-method</id>
    <content type="html"><![CDATA[<p>I keep a file of code I like. When looking for inspiration, I read through the file. It’s short; I often re-write the samples to be nothing but the minimally inspiring thought.</p>

<!--more-->


<p>Here is the first snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>  <span class="kp">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Think on it for yourself before I explain what it means to me. I’d like to hear what it means to you — leave a long comment here before you keep reading.</p>

<p>To me, it’s a reminder of how to write a beautiful class method: instantiate the class then call a method on the instance.</p>

<p>Look at it from the perspective of the person calling the class method. When you call a class method you want one of two things: either you want to construct an instance of the class itself (<code>.new</code>, or perhaps <code>.new_from_file</code>, <code>.new_for_widescreen</code>, and <code>.new_from_json</code>), or you want convenience.</p>

<p>Think of the class methods you’ve seen, or have written. If they are not in the above style, they might look more like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ImageUploader</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">xpm</span><span class="p">)</span>
</span><span class='line'>    <span class="vc">@@dimensions</span> <span class="o">=</span> <span class="n">geometry_for</span><span class="p">(</span><span class="n">xpm</span><span class="p">)</span>
</span><span class='line'>    <span class="vc">@@color_palette</span> <span class="o">=</span> <span class="n">colors_for</span><span class="p">(</span><span class="n">xpm</span><span class="p">)</span>
</span><span class='line'>    <span class="n">svg</span> <span class="o">=</span> <span class="n">generate_svg</span><span class="p">(</span><span class="n">xpm</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">geometry_for</span><span class="p">(</span><span class="n">xpm</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">colors_for</span><span class="p">(</span><span class="n">xpm</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">generate_svg</span><span class="p">(</span><span class="n">xpm</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What a mess of an object. An abuse of the singleton pattern, where it wasn’t even intended. Class variables being used in an especially not-thread-safe way, plus a jumble of code that is all exposed. It is daunting to extend because it is a tricky thought process to understand the full implications of even using it.</p>

<p>When dealing with an object you want a small interface. As a user you want the fewest number of options, and the one with the best abstraction; as a developer you want to hide as much of the implementation as possible, giving you full freedom to change the internals. The best object is one with no exposed methods at all.</p>

<p>The above pattern gives you that. You call .run and pass a user, and it takes care of the rest. If the default constructor changes its arity, the instance method (#run) changes its name, or the object is re-written in C and needs to do pointer arithmetic first: you are protected.</p>

<p>The snippet has explicit names for things: run and user. This brings to mind the command pattern, and especially a command pattern for dealing with users. Perhaps something to kick off the backend signup process. The command pattern is a quick way to start reducing a god class (PDF); pushing various bits of User into the SignUp class will help simplify both.</p>

<p>The simplicity of the snippet is a reminder to use abstractions on the same “level”. Create an instance and call a method on that; perhaps in the instance’s #run method, it will instantiate a few more objects and call a method on those; and so on. Short methods all the way down, explained with clear but concise names.</p>

<p>This snippet happens to be in Ruby, an inspiration unto itself. A part of the power behind the command pattern is in Ruby’s duck typing. Let’s say this is a class method on SignUp. I know that I can pass SignUp itself to something that expects to call run, passing a user. In doing so, I know that I can fake it in a test with any object that responds to run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FakeSignup</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">should_succeed</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@should_succeed</span> <span class="o">=</span> <span class="n">should_succeed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="k">unless</span> <span class="vi">@should_succeed</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s2">&quot;I am supposed to fail&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The idea of passing SignUp around makes me think of queues: you can add the SignUp class to a background job runner to get an asynchronous workflow from within Rails. You could spawn a co-routine, passing SignUp and a user object. Once you’ve been inspired by the snippet, a world of concurrency opens up.</p>

<p>So that’s what I think of when I see my first snippet from my collection of inspirational code. What do you see?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2 Keyword Arguments]]></title>
    <link href="http://www.appsource.biz/blog/2014/08/03/ruby-2-keyword-arguments/"/>
    <updated>2014-08-03T23:44:33+08:00</updated>
    <id>http://www.appsource.biz/blog/2014/08/03/ruby-2-keyword-arguments</id>
    <content type="html"><![CDATA[<p>Ruby 2.0 introduced first-class support for keyword arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="ss">bar</span><span class="p">:</span> <span class="s1">&#39;default&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">bar</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span> <span class="c1"># =&gt; &#39;default&#39;</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="ss">bar</span><span class="p">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &#39;baz&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>In Ruby 1.9, we could do something similar using a single Hash parameter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">bar</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:bar</span><span class="p">,</span> <span class="s1">&#39;default&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">bar</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span> <span class="c1"># =&gt; &#39;default&#39;</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="ss">bar</span><span class="p">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &#39;baz&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby 2.0 blocks can also be defined with keyword arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">define_method</span><span class="p">(</span><span class="ss">:foo</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="ss">bar</span><span class="p">:</span> <span class="s1">&#39;default&#39;</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">bar</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span> <span class="c1"># =&gt; &#39;default&#39;</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="ss">bar</span><span class="p">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &#39;baz&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, to achieve similar behavior in Ruby 1.9, the block would take an options hash, from which we would extract argument values.</p>

<p><strong>Required keyword arguments</strong></p>

<p>Unfortunately, Ruby 2.0 doesn’t have built-in support for required keyword arguments. Luckily, Ruby 2.1 introduced required keyword arguments, which are defined with a trailing colon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="ss">bar</span><span class="p">:)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">bar</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span> <span class="c1"># =&gt; ArgumentError: missing keyword: bar</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="ss">bar</span><span class="p">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &#39;baz&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If a required keyword argument is missing, Ruby will raise a useful ArgumentError that tells us which required argument we must include.</p>

<p><strong>Keyword arguments vs options hash</strong></p>

<p>With first-class keyword arguments in the language, we don’t have to write the boilerplate code to extract hash options. Unnecessary boilerplate code increases the opportunity for typos and bugs.</p>

<p>With keyword arguments defined in the method signature itself, we can immediately discover the names of the arguments without having to read the body of the method.</p>

<p>Note that the calling code is syntactically equal to calling a method with hash arguments, which makes for an easy transition from options hashes to keyword arguments.</p>

<p><strong>Keyword arguments vs positional arguments</strong></p>

<p>Assume we have a method with positional arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">mysterious_total</span><span class="p">(</span><span class="n">subtotal</span><span class="p">,</span> <span class="n">tax</span><span class="p">,</span> <span class="n">discount</span><span class="p">)</span>
</span><span class='line'>  <span class="n">subtotal</span> <span class="o">+</span> <span class="n">tax</span> <span class="o">-</span> <span class="n">discount</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysterious_total</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c1"># =&gt; 105</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method does its job, but as a reader of the code using the mysterious_total method, I have no idea what those arguments mean without looking up the implementation of the method.</p>

<p>By using keyword arguments, we know what the arguments mean without looking up the implementation of the called method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">obvious_total</span><span class="p">(</span><span class="ss">subtotal</span><span class="p">:,</span> <span class="ss">tax</span><span class="p">:,</span> <span class="ss">discount</span><span class="p">:)</span>
</span><span class='line'>  <span class="n">subtotal</span> <span class="o">+</span> <span class="n">tax</span> <span class="o">-</span> <span class="n">discount</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obvious_total</span><span class="p">(</span><span class="ss">subtotal</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="ss">tax</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">discount</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span> <span class="c1"># =&gt; 105</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keyword arguments allow us to switch the order of the arguments, without affecting the behavior of the method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">obvious_total</span><span class="p">(</span><span class="ss">subtotal</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="ss">discount</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">tax</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span> <span class="c1"># =&gt; 105</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we switch the order of the positional arguments, we are not going to get the same results, giving our customers more of a discount than they deserve:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mysterious_total</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="c1"># =&gt; 95</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Connascence and trade-offs</strong></p>

<p><em>Connascence between two software components A and B means either 1) that you can postulate some change to A that would require B to be changed (or at least carefully checked) in order to preserve overall correctness, or 2) that you can postulate some change that would require both A and B to be changed together in order to preserve overall correctness. - Meilir Page-Jones, What Every Programmer Should Know About Object-Oriented Design</em></p>

<p>When one Ruby method has to know the correct order of another method’s positional arguments, we end up with connascence of position.</p>

<p>If we decide to change the order of the parameters to <code>mysterious_total</code>, we must change all callers of that method accordingly. Not only that, but our mental model of how to use this method must change as well, which isn’t as simple as a find/replace.</p>

<p>Like most things, keyword arguments have their trade-offs. Positional arguments offer a more succinct way to call a method. Usually, the code clarity and maintainability gained from keyword arguments outweigh the terseness offered by positional arguments. I would use positional arguments if I could easily guess their meanings based on the method’s name, but I find this rarely to be the case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Rails' Type Casting Works]]></title>
    <link href="http://www.appsource.biz/blog/2013/12/04/how-rails-type-casting-works/"/>
    <updated>2013-12-04T00:04:20+08:00</updated>
    <id>http://www.appsource.biz/blog/2013/12/04/how-rails-type-casting-works</id>
    <content type="html"><![CDATA[<p>Have you ever noticed that when you assign a property to an Active Record model and read it back, the value isn’t always the same? Here’s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">StoreListing</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">create_table</span> <span class="ss">:store_listings</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:price_in_cents</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">store_listing</span> <span class="o">=</span> <span class="no">StoreListing</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">store_listing</span><span class="o">.</span><span class="n">price_in_cents</span> <span class="o">=</span> <span class="s2">&quot;100&quot;</span> <span class="c1"># Note, this is a string</span>
</span><span class='line'><span class="n">store_listing</span><span class="o">.</span><span class="n">price_in_cents</span> <span class="c1"># =&gt; 100</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>This is because Active Record automatically type casts all input so that it matches the database schema. Depending on the type, this may be incredibly simple, or extremely complex. Let’s take a look into how the internals work in 4.1.</p>

<p>The first method we need to understand in the above code is where the price_in_cents method is defined. In older versions of Rails, your models would go look up the database schema and define the attribute methods as soon as it was loaded. However, this caused problems on platforms like Heroku, where you might want to load the application when you don’t have a real database connection.</p>

<p>Today, the loading is lazy, and happens in a call to <code>method_missing</code> (source). The important line here is the call to <code>define_attribute_methods</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="c1"># :nodoc:</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">define_attribute_methods</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">respond_to_without_attributes?</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># make sure to invoke the correct attribute method, as we might have gotten here via a `super`</span>
</span><span class='line'>    <span class="c1"># call in a overwritten attribute method</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">attribute_method</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">find_generated_attribute_method</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># this is probably horribly slow, but should only happen at most once for a given AR class</span>
</span><span class='line'>      <span class="n">attribute_method</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">super</span> <span class="k">unless</span> <span class="n">respond_to_missing?</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">send</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Active Record’s definition of <code>define_attribute_methods</code> does little of note, other than call super with <code>column_names</code> (source).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">define_attribute_methods</span> <span class="c1"># :nodoc:</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="vi">@attribute_methods_generated</span>
</span><span class='line'>  <span class="c1"># Use a mutex; we don&#39;t want two thread simultaneously trying to define</span>
</span><span class='line'>  <span class="c1"># attribute methods.</span>
</span><span class='line'>  <span class="n">generated_attribute_methods</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="vi">@attribute_methods_generated</span>
</span><span class='line'>    <span class="n">superclass</span><span class="o">.</span><span class="n">define_attribute_methods</span> <span class="k">unless</span> <span class="nb">self</span> <span class="o">==</span> <span class="n">base_class</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="n">column_names</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@attribute_methods_generated</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We won’t look into how <code>column_names</code> gets determined today, but that method call is what causes Rails to go perform the SQL query that loads information about the model’s schema. Inside of Active Model, we’ll do some metaprogramming magic and ultimately end up calling <code>define_method_attribute</code> (source). Finally, in the body of <code>define_method_attribute</code>, we can see the method that gets called is <code>read_attribute</code> (source). Quite a bit of legwork!</p>

<p>If you decide to read along with us, make sure you’re on the 4-1-stable branch. A lot of this code has changed significantly on master. One of the most important changes to keep in mind is that <code>@attributes_cache</code> has been renamed to @attributes, and @attributes has been renamed to <code>@raw_attributes</code>.</p>

<p>The body of <code>read_attribute</code> looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">read_attribute</span><span class="p">(</span><span class="n">attr_name</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># If it&#39;s cached, just return it</span>
</span><span class='line'>  <span class="c1"># We use #[] first as a perf optimization for non-nil values. See https://gist.github.com/jonleighton/3552829.</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="n">attr_name</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="vi">@attributes_cache</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">||</span> <span class="vi">@attributes_cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">column</span> <span class="o">=</span> <span class="vi">@column_types_override</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="k">if</span> <span class="vi">@column_types_override</span>
</span><span class='line'>    <span class="n">column</span> <span class="o">||=</span> <span class="vi">@column_types</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@attributes</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="s1">&#39;id&#39;</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">primary_key</span> <span class="o">!=</span> <span class="nb">name</span>
</span><span class='line'>        <span class="n">read_attribute</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">primary_key</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">unless</span> <span class="n">column</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="vi">@attributes</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">block_given?</span> <span class="p">?</span> <span class="k">yield</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">cache_attribute?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@attributes_cache</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="n">column</span><span class="o">.</span><span class="n">type_cast</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">column</span><span class="o">.</span><span class="n">type_cast</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s go through each segment and understand what it’s doing. First we call <code>to_s</code> on the argument, as it’s possible we were passed a symbol (this method is part of the public API). Next we check to see if we’ve already type cast this attribute, as we cache the results. The next line is not always obvious.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">column</span> <span class="o">=</span> <span class="vi">@column_types_override</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="k">if</span> <span class="vi">@column_types_override</span>
</span><span class='line'><span class="n">column</span> <span class="o">||=</span> <span class="vi">@column_types</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@column_types_override</code> is sometimes given to us when the model in question was built as part of the result of a SQL query. If you’ve done something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span>
</span><span class='line'>  <span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:comments</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s1">&#39;posts.*, COUNT(comments.*) AS comments_count&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s1">&#39;comments.post_id&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>then we sometimes have to do additional leg work to type cast the count to an integer. If you ran that code while using the MySQL adapter or PostgreSQL adapter (keep in mind that most MySQL users are using the MySQL2 adapter), then @column_types_override would look like: <code>{ 'comments_count' =&gt; an_object_that_type_casts_to_int }</code>. Continuing to the next line, <code>@column_types</code> will contain the column object that is crucial to this behavior, except for a few special cases (which we will have to cover another time).</p>

<p>The next block of code causes model.id to return the primary key, even if the primary key for the table is a column other than id.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">return</span> <span class="vi">@attributes</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="s1">&#39;id&#39;</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">primary_key</span> <span class="o">!=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="n">read_attribute</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">primary_key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span> <span class="k">unless</span> <span class="n">column</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we need to grab the raw, un-typecast version of the attribute, which came either from user input, or from the database (“user” in this case refers to you, the programmer using Rails). However, there’s an interesting fork in behavior here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="vi">@attributes</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">block_given?</span> <span class="p">?</span> <span class="k">yield</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first question is whether or not a block was given. This is based on how read_attribute ended up being called. If you called it as post.title, no block would have been given. If you called it as post[:title], then a block would have been given to raise an exception. The reason that the title method would exist in this case, even if we don’t have a &lsquo;title&rsquo; key in our attributes hash is: you performed a custom select statement. (This is an excellent example of how one feature can cause a surprising amount of complexity if not sufficiently isolated).</p>

<p>The conditional around caching attributes is actually bugged, and will always return true for most users, so we’ll ignore it. This leaves us with the line of importance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@attributes_cache</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="n">column</span><span class="o">.</span><span class="n">type_cast</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>column in this case, will be an instance of ActiveRecord::ConnectionAdapters::Column, or one of its adapter specific subclasses. The behavior in question lives on the type_cast method (source).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Casts value (which is a String) to an appropriate instance.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">type_cast</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">coder</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">if</span> <span class="n">encoded?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">klass</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="n">type</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">:text</span>        <span class="k">then</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:integer</span>              <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">value_to_integer</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:float</span>                <span class="k">then</span> <span class="n">value</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:decimal</span>              <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">value_to_decimal</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:datetime</span><span class="p">,</span> <span class="ss">:timestamp</span> <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">string_to_time</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:time</span>                 <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">string_to_dummy_time</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:date</span>                 <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">value_to_date</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:binary</span>               <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">binary_to_string</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:boolean</span>              <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">value_to_boolean</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As any good method should, we start with an extremely misleading comment (the value will be anything you passed to the writer, not a string). Like many methods in Column, we also have a case statement based on type, and will call one of many helper methods based on which type it is. type will have been set back in the constructor, by using a regex from the sql_type source. sql_type will be the raw type string from the database schema, such as varchar(255).</p>

<p>At this point, the behavior is linear. All of the helper methods called exist in the class, and most are no more than a few lines long.</p>

<p>Also of note is the method type_cast_for_write, which gets called during the writer, before we store the attributes for type casting later. (Note: Anything that happens in this method will be applied to the _before_type_cast version of the attribute as well.)</p>

<p>If you’ve been cringing looking through the Column class, you’re justified. Luckily, it’s gotten much better. In preparation for adding a public API to hook into the type casting behavior in 4.2, this class has been heavily refactored to focus on polymorphism, rather than conditionals and regular expressions. In part 2, we’ll dig into some of the refactoring that’s been done, and the decisions behind it.</p>
]]></content>
  </entry>
  
</feed>
